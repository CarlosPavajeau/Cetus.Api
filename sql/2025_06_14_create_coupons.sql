DROP TYPE IF EXISTS coupons;
CREATE TYPE coupon_discount_type AS ENUM ('percentage', 'fixed_amount', 'free_shipping');

DROP TYPE IF EXISTS coupon_rule_type;
CREATE TYPE coupon_rule_type AS ENUM ('min_purchase_amount', 'specific_product', 'specific_category', 'one_per_customer');

CREATE TABLE coupons
(
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code           VARCHAR(100)         NOT NULL UNIQUE,
    description    TEXT,
    discount_type  coupon_discount_type NOT NULL,
    discount_value DECIMAL(12, 2)       NOT NULL CHECK (discount_value >= 0),
    usage_count    INT                  NOT NULL DEFAULT 0,
    usage_limit    INT                  NULL,
    is_active      BOOLEAN              NOT NULL DEFAULT true,
    start_date     TIMESTAMP,
    end_date       TIMESTAMP,
    created_at     TIMESTAMP            NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at     TIMESTAMP            NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE UNIQUE INDEX coupons_lower_case_code_idx ON coupons (LOWER(code));

CREATE TRIGGER update_coupons_updated_at
    BEFORE UPDATE
    ON coupons
    FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TABLE coupon_rules
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    coupon_id  BIGINT           NOT NULL,
    rule_type  coupon_rule_type NOT NULL,
    value      VARCHAR(255)     NOT NULL,
    created_at TIMESTAMP        NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP        NOT NULL DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (coupon_id) REFERENCES coupons (id) ON DELETE CASCADE
);

CREATE INDEX idx_coupon_rules_coupon_id ON coupon_rules (coupon_id);

CREATE TRIGGER update_coupon_rules_updated_at
    BEFORE UPDATE
    ON coupon_rules
    FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TABLE coupon_usages
(
    id                      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    coupon_id               BIGINT         NOT NULL,
    customer_id             VARCHAR(50)    NOT NULL,
    order_id                UUID           NOT NULL,
    discount_amount_applied DECIMAL(12, 2) NOT NULL,
    use_at                  TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (coupon_id) REFERENCES coupons (id) ON DELETE RESTRICT,
    FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE RESTRICT
);

CREATE INDEX idx_coupon_usages_coupon_id ON coupon_usages (coupon_id);
CREATE INDEX idx_coupon_usages_customer_id ON coupon_usages (customer_id);

CREATE OR REPLACE FUNCTION update_coupon_usage_count()
    RETURNS TRIGGER AS
$$
BEGIN
    IF (TG_OP = 'INSERT') THEN
        UPDATE coupons
        SET usage_count = usage_count + 1
        WHERE id = NEW.coupon_id;
        RETURN NEW;
    ELSIF (TG_OP = 'DELETE') THEN
        UPDATE coupons
        SET usage_count = usage_count - 1
        WHERE id = OLD.coupon_id;
        RETURN OLD;
    END IF;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


