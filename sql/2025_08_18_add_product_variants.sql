CREATE TABLE product_option_types
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name       VARCHAR(100) NOT NULL,

    created_at TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP
);

ALTER TABLE product_option_types
    ADD CONSTRAINT chk_pot_nonempty_name CHECK (length(btrim(name)) > 0);

CREATE UNIQUE INDEX ux_pot_store_name
    ON product_option_types (store_id, lower(name)) WHERE deleted_at IS NULL;

CREATE TRIGGER update_product_option_types_updated_at
    BEFORE UPDATE
    ON product_option_types
    FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TABLE product_option_values
(
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    option_type_id BIGINT       NOT NULL,
    value          VARCHAR(100) NOT NULL,

    created_at     TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at     TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deleted_at     TIMESTAMP,

    CONSTRAINT fk_option_values_option
        FOREIGN KEY (option_type_id) REFERENCES product_option_types (id) ON DELETE CASCADE
);

ALTER TABLE product_option_values
    ADD CONSTRAINT chk_pov_nonempty_value CHECK (length(btrim(value)) > 0);

CREATE UNIQUE INDEX ux_pov_type_value
    ON product_option_values (option_type_id, lower(value)) WHERE deleted_at IS NULL;

CREATE INDEX ix_pov_option_type_id
    ON product_option_values (option_type_id);

CREATE TABLE product_options
(
    product_id     uuid   NOT NULL,
    option_type_id BIGINT NOT NULL,
    PRIMARY KEY (product_id, option_type_id),
    CONSTRAINT fk_po_product FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE,
    CONSTRAINT fk_po_option FOREIGN KEY (option_type_id) REFERENCES product_option_types (id) ON DELETE CASCADE
);

CREATE INDEX ix_po_option_type_id
    ON product_options (option_type_id);

CREATE TABLE product_variants
(
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id     uuid                NOT NULL,
    sku            VARCHAR(100) UNIQUE NULL,
    price          DECIMAL(12, 2)      NOT NULL,
    stock_quantity INT                 NOT NULL DEFAULT 0,
    created_at     TIMESTAMP           NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at     TIMESTAMP           NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deleted_at     TIMESTAMP,

    CONSTRAINT fk_variant_product
        FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE
);

ALTER TABLE product_variants
    ADD CONSTRAINT chk_variant_price_nonnegative CHECK (price >= 0),
    ADD CONSTRAINT chk_variant_stock_nonnegative CHECK (stock_quantity >= 0);

CREATE INDEX ix_variant_product_id
    ON product_variants (product_id);

DROP INDEX IF EXISTS product_variants_sku_key;
CREATE UNIQUE INDEX ux_variant_sku_ci
    ON product_variants (lower(sku)) WHERE sku IS NOT NULL AND deleted_at IS NULL;

CREATE TRIGGER update_product_variants_updated_at
    BEFORE UPDATE
    ON product_variants
    FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TABLE product_variant_option_values
(
    variant_id      BIGINT NOT NULL,
    option_value_id BIGINT NOT NULL,
    PRIMARY KEY (variant_id, option_value_id),
    CONSTRAINT fk_map_variant
        FOREIGN KEY (variant_id) REFERENCES product_variants (id) ON DELETE CASCADE,
    CONSTRAINT fk_map_option_value
        FOREIGN KEY (option_value_id) REFERENCES product_option_values (id) ON DELETE CASCADE
);

CREATE INDEX ix_vov_variant_id
    ON product_variant_option_values (variant_id);

CREATE INDEX ix_vov_option_value_id
    ON product_variant_option_values (option_value_id);

CREATE
    OR REPLACE FUNCTION validate_variant_option_value()
    RETURNS trigger
    LANGUAGE plpgsql AS
$$
DECLARE
    v_product_id uuid;
    v_option_type_id
                 bigint;
    ok
                 boolean;
BEGIN
    SELECT product_id
    INTO v_product_id
    FROM product_variants
    WHERE id = NEW.variant_id;
    SELECT option_type_id
    INTO v_option_type_id
    FROM product_option_values
    WHERE id = NEW.option_value_id;

-- Ensure the product declares this option type
    SELECT EXISTS(SELECT 1
                  FROM product_options po
                  WHERE po.product_id = v_product_id
                    AND po.option_type_id = v_option_type_id)
    INTO ok;

    IF
        NOT ok THEN
        RAISE EXCEPTION 'Option value (%) not allowed for variant (%) due to missing product option type mapping',
            NEW.option_value_id, NEW.variant_id;
    END IF;

    RETURN NEW;
END
$$;

CREATE
    CONSTRAINT TRIGGER trg_vov_validate
    AFTER INSERT OR
        UPDATE
    ON product_variant_option_values
    DEFERRABLE INITIALLY DEFERRED
    FOR EACH ROW
EXECUTE FUNCTION validate_variant_option_value();

ALTER TABLE product_images
    ADD COLUMN variant_id BIGINT NULL;

ALTER TABLE product_images
    ADD CONSTRAINT fk_image_variant FOREIGN KEY (variant_id) REFERENCES product_variants (id) ON DELETE CASCADE;
